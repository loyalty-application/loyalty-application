version: '3.1'

services:
  # mongo keyfile generator
  keyfile-generator:
    container_name: keyfile-generator
    image: alpine:latest
    restart: on-failure
    command: sh -c 'apk --no-cache add openssl && openssl rand -base64 741 > keyfile/key && chmod 400 keyfile/key && chown 999:999 keyfile/key && cat keyfile/key'
    volumes:
      - keyfile:/keyfile
    profiles: [ "web" ]

  # standalone mongodb container as replica set
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    env_file: ./.env
    ports:
      - 27017:27017
    volumes:
      - keyfile:/keyfile
    depends_on:
      - keyfile-generator
    command: 'mongod --auth --keyFile /keyfile/key --replSet replica-set'
    profiles: [ "web", "kafka" ]

  # Initialization server
  # To run rs.initiate() command 
  mongo-init:
    container_name: mongo-init
    image: mongo
    restart: on-failure
    env_file: ./.env
    depends_on:
      - mongo
    command: >
      bash -c '
        sleep 10 &&
        mongosh \
          --host mongo:27017 \
          --username ${MONGO_INITDB_ROOT_USERNAME} \
          --password ${MONGO_INITDB_ROOT_PASSWORD} \
          --eval "rs.initiate()"'
    profiles: [ "web" ]

  # mongo express container - UI for mongodb
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    env_file: ./.env
    depends_on:
      - mongo
    ports:
      - 8085:8081
    profiles: [ "web" ]

  # go-gin-backend container
  go-gin-backend:
    container_name: go-gin-backend
    image: go-gin-backend:latest
    build:
      context: ./go-gin-backend
      dockerfile: ./docker/Dockerfile.dev
    env_file: ./go-gin-backend/.env
    restart: always
    depends_on:
      - mongo
    volumes:
      - ./go-gin-backend:/app
    ports:
      - 8080:8080
    profiles: [ "web" ]

  # go worker node container
  go-worker:
    container_name: go-worker
    image: go-worker:latest
    build:
      context: ./go-worker-node
      dockerfile: ./docker/Dockerfile
    env_file:
      - ./go-worker-node/.ftp.env
    restart: always
    depends_on:
      - broker
      - mongo
    platform: linux/amd64
    volumes:
      - ./go-worker-node:/worker
    profiles: [ "kafka" ]

  go-worker2:
    container_name: go-worker2
    image: go-worker:latest
    build:
      context: ./go-worker-node
      dockerfile: ./docker/Dockerfile
    env_file:
      - ./go-worker-node/.rest.env
    restart: always
    depends_on:
      - broker
      - mongo
    platform: linux/amd64
    volumes:
      - ./go-worker-node:/worker
    profiles: [ "kafka" ]

  go-worker3:
    container_name: go-worker3
    image: go-worker:latest
    build:
      context: ./go-worker-node
      dockerfile: ./docker/Dockerfile
    env_file:
      - ./go-worker-node/.user.env
    restart: always
    depends_on:
      - broker
      - mongo
    platform: linux/amd64
    volumes:
      - ./go-worker-node:/worker
    profiles: [ "kafka" ]

  # go-sftp-txn
  # go-sftp-txn:
  #   container_name: go-sftp-txn
  #   image: go-sftp-txn:latest
  #   build:
  #     context: ./go-sftp-txn
  #     dockerfile: ./docker/Dockerfile
  #   env_file: ./go-sftp-txn/.env
  #   volumes:
  #     - ./go-sftp-txn/data:/root/data
  #   command: "2021-09-20"
  #   depends_on:
  #     - connect
  #   profiles: [ "kafka" ]

  # kafka broker 1
  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      # HIGH ==================================
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092 # PER BROKER
      KAFKA_BROKER_ID: 1 # READONLY
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER' # READONLY
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093,2@broker2:29093,3@broker3:29093'
        # READONLY
        # KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093' # READONLY
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092' # PER BROKER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT # PER BROKER
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs' # READONLY
      KAFKA_MIN_INSYNC_REPLICAS: 1 # CLUSTER WIDE
      KAFKA_NODE_ID: 1 # READONLY - KRaft
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2 # READONLY
      KAFKA_PROCESS_ROLES: 'broker,controller' # READONLY -> KRaft
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # READONLY
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # READONLY

      # MEDIUM ==================================
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3 # READONLY
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # READONLY
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT' # READONLY
      KAFKA_JMX_PORT: 9101 # JMX EXPORTER
      KAFKA_JMX_HOSTNAME: localhost # JMX EXPORTER
    restart: always
    volumes:
      - ./update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    profiles: [ "kafka" ]

  # kafka broker 2
  broker2:
    image: confluentinc/cp-kafka:latest
    container_name: broker2
    depends_on:
      - broker
    ports:
      - "9093:9092"
      - "9102:9101"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093,2@broker2:29093,3@broker3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker2:29092,CONTROLLER://broker2:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 1
    restart: always
    volumes:
      - ./update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    profiles: [ "kafka" ]

  # kafka broker 3
  broker3:
    image: confluentinc/cp-kafka:latest
    container_name: broker3
    depends_on:
      - broker
    ports:
      - "9094:9092"
      - "9103:9101"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:29092,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093,2@broker2:29093,3@broker3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker3:29092,CONTROLLER://broker3:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 1
    restart: always
    volumes:
      - ./update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    profiles: [ "kafka" ]

  # kafka init scripts
  init-kafka:
    image: init-kafka:latest
    build:
      context: ./init-kafka
      dockerfile: ./Dockerfile
    depends_on:
      - broker
      - connect
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      CONNECTOR_HOST: http://connect:8083
    profiles: [ 'kafka' ]

  # kafka schema-registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    restart: always
    profiles: [ "kafka" ]

  # kafka connect
  connect:
    image: kafka-connect:latest
    build:
      context: ./kafka-connect
      dockerfile: ./Dockerfile
    hostname: connect
    container_name: connect
    env_file:
      - ./kafka-connect/.env
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT: SFTP_NODE
      # HIGH ===================
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      #CONNECT_EXACTLY_ONCE_SOURCE_SUPPORT:

      # LOW =================== 
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      # DEPRECATED SINCE 2.0 ====
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"

      # NON CONNECT DOCUMENTED
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.1.jar # CLASSPATH required due to CC-2422
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    restart: always
    command:
      - bash
      - -c
      - |
        chmod 777 /data && chmod 777 /data/* && echo "Installing connector plugins"
        # confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.0.2
        # confluent-hub install --no-prompt jcustenborder/kafka-connect-spooldir:2.0.65
        # confluent-hub install --no-prompt streamthoughts/kafka-connect-file-pulse:1.5.0
        #
        # -----------
        # Launch the Kafka Connect worker
        rm /data/unprocessed/*.PROCESSING &
        ./run.sh 2021-09-20 &
        /etc/confluent/docker/run &
        #
        # Don't exit
        sleep infinity
    volumes:
      - ./kafka-connect/data:/data
    profiles: [ "kafka" ]

  # kafka connect
  connect1:
    image: kafka-connect:latest
    build:
      context: ./kafka-connect
      dockerfile: ./Dockerfile
    hostname: connect1
    container_name: connect1
    env_file:
      - ./kafka-connect/.env
    depends_on:
      - broker
      - schema-registry
    # ports:
    #   - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect1
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    restart: always
    command:
      - bash
      - -c
      - |
        chmod 777 /data && chmod 777 /data/* && echo "Installing connector plugins"
        # confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.0.2
        # confluent-hub install --no-prompt jcustenborder/kafka-connect-spooldir:2.0.65
        # confluent-hub install --no-prompt streamthoughts/kafka-connect-file-pulse:1.5.0
        #
        # -----------
        # Launch the Kafka Connect worker
        rm /data/unprocessed/*.PROCESSING &
        ./run.sh 2021-09-20 &
        /etc/confluent/docker/run &
        #
        # Don't exit
        sleep infinity
    volumes:
      - ./kafka-connect/data:/data
    profiles: [ "kafka" ]

  # kafka control center
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.1
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_CONNECT_CONNECT: "connect:8083"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    profiles: [ "kafka" ]

volumes:
  keyfile:
