name: Production Build Push to Dockerhub

on:
  push:
    branches:
      - 'main'
env:
  AWS_REGION: ap-southeast-1 # set this to your preferred AWS region, e.g. us-west-1
  ECS_SERVICE: kafka-connect-service
  ECS_CLUSTER: kafka-connect-cluster

jobs:
  init_kafka:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./init-kafka
          file: ./init-kafka/Dockerfile
          push: true
          tags: loyaltyapplication/init-kafka:latest

  kafka_connect:
    runs-on: ubuntu-latest
    needs: init_kafka
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push kafka-connect
        uses: docker/build-push-action@v3
        with:
          context: ./kafka-connect
          file: ./kafka-connect/Dockerfile
          push: true
          tags: loyaltyapplication/kafka-connect:latest

  #aws_deploy:
    #needs: [ kafka_connect, init_kafka ]
    #runs-on: ubuntu-latest
    #steps:
      #- name: Checkout
        #uses: actions/checkout@v3

      #- name: Configure AWS credentials
        #uses: aws-actions/configure-aws-credentials@v1
        #with:
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #aws-region: ${{ env.AWS_REGION }}

      #- name: Build, tag, and push image to Amazon ECR
        #id: build-image
        #env:
          #IMAGE_TAG: latest
        #run: |
          ## Redeploy ECS
          #aws ecs update-service --region $AWS_REGION --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
